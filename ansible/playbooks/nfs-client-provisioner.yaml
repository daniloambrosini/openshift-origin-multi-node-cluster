---
kind: "Template"
apiVersion: "v1"
metadata:
  name: "nfs-client-provisioner"
  annotations:
    description: "NFS dynamic provisioner"
    iconClass: "icon-shadowman"
    tags: "nfs,storage"
labels:
  template: "nfs-client-provisioner"

parameters:
  - name: "NAMESPACE"
    displayName: "Namespace"
    description: "Namespace"
    value: "nfs-client-provisioner"
    required: true
  - name: "PROVISIONER_NAME"
    displayName: "Provisioner Name"
    description: "Provisioner Name"
    value: "local.net/nfs-ocp3-ext"
    required: true
  - name: "NFS_SERVER"
    displayName: "NFS Server Name"
    description: "NFS Server Name"
    required: true
  - name: "NFS_PATH"
    displayName: "Exports on NFS server"
    description: "Exports on NFS server"
    required: true
  - name: "NFS_STORAGE_CLASS_NAME"
    displayName: "NFS Storage Class Name"
    description: "NFS Storage Class Name"
    required: true
objects:
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: nfs-client-provisioner
    namespace: ${NAMESPACE}
- kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: nfs-client-provisioner-runner
  rules:
    - apiGroups: [""]
      resources: ["persistentvolumes"]
      verbs: ["get", "list", "watch", "create", "delete"]
    - apiGroups: [""]
      resources: ["persistentvolumeclaims"]
      verbs: ["get", "list", "watch", "update"]
    - apiGroups: ["storage.k8s.io"]
      resources: ["storageclasses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["create", "update", "patch"]
- kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: run-nfs-client-provisioner
  subjects:
    - kind: ServiceAccount
      name: nfs-client-provisioner
      namespace: ${NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: nfs-client-provisioner-runner
    apiGroup: rbac.authorization.k8s.io
- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: leader-locking-nfs-client-provisioner
    namespace: ${NAMESPACE}
  rules:
    - apiGroups: [""]
      resources: ["endpoints"]
      verbs: ["get", "list", "watch", "create", "update", "patch"]
- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: leader-locking-nfs-client-provisioner
    namespace: ${NAMESPACE}
  subjects:
    - kind: ServiceAccount
      name: nfs-client-provisioner
      namespace: ${NAMESPACE}
  roleRef:
    kind: Role
    name: leader-locking-nfs-client-provisioner
    apiGroup: rbac.authorization.k8s.io
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: nfs-client-provisioner
    namespace: ${NAMESPACE}
  spec:
    selector:
      matchLabels:
        app: nfs-client-provisioner
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: nfs-client-provisioner
      spec:
        serviceAccountName: nfs-client-provisioner
        containers:
          - name: nfs-client-provisioner
            image: quay.io/external_storage/nfs-client-provisioner:latest
            volumeMounts:
              - name: nfs-client-root
                mountPath: /persistentvolumes
            env:
              - name: PROVISIONER_NAME
                value: ${PROVISIONER_NAME}
              - name: NFS_SERVER
                value: ${NFS_SERVER}
              - name: NFS_PATH
                value: ${NFS_PATH}
        volumes:
          - name: nfs-client-root
            nfs:
              server: ${NFS_SERVER}
              path: ${NFS_PATH}
- kind: StorageClass
  apiVersion: storage.k8s.io/v1
  metadata:
    name: ${NFS_STORAGE_CLASS_NAME}
  provisioner: ${PROVISIONER_NAME}
  parameters:
    archiveOnDelete: "false"
